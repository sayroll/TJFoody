@page "/chathub"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IUserService UserService
@inject ILocalStorageService LocalStorage
@implements IAsyncDisposable
@layout MainLayout

<PageTitle>聊天室</PageTitle>

@if(user !=null)
{
    <Card>
        <BodyTemplate>
            <div style="float:left;width:6%">
                <img class="img-fluid" style="object-fit: cover;" src="@user.Avartar" />
            </div>
            <div style="float:left;padding-left:20px;width:80%">
                <h5 style="font-weight:bold;color:#7F82BB">@user.Name</h5>
            </div>
        </BodyTemplate>
    </Card>
}


<hr>

<div>
    @foreach (var message in messages)
    {
        <div class="@message.CSS">
            <div class="user">@message.Username</div>
            <div class="msg">@message.Body</div>
        </div>
    }

    <hr />
    <textarea class="input-lg" placeholder="在这里输入内容" @bind="@messageInput"></textarea>
    <button class="btn btn-default" @onclick="@Send">发送</button>
</div>


@code {
    private HubConnection? hubConnection;
    private List<Message> messages = new List<Message>();
    private string? userInput;
    private string? messageInput;
    private User user;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            bool isMine = user.Equals(userInput);
            Message m = new(user, message, isMine);
            messages.Add(m);
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        string phone = await LocalStorage.GetItemAsStringAsync("phone");
        phone = phone.Replace("\"", "");
        user = await UserService.GetUserByPhone(phone);
        if (user == null)
        {
            userInput = "游客";
        }
        else
        {
            userInput = user.Name;
        }
        StateHasChanged();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
            messageInput = String.Empty;
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private class Message
    {
        public Message(string username,string body,bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }
        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }
        public string CSS => Mine ? "sent" : "received";
    }
}