@page "/team"
@using System.ComponentModel.DataAnnotations;
@using System.Diagnostics.CodeAnalysis;
@using System.Reflection;
@layout MainLayout
@inject ITeamService TeamService
@inject ILocalStorageService LocalStorage
@inject IUserJoinTeamService UserJoinTeamService
@inject IUserService UserService
@inject MessageService MessageService


<PageTitle>组队信息</PageTitle>

<Tab IsCard="true" IsBorderCard="true">
    <TabItem Text="组队广场">

        <center>
            <div style="padding-bottom:20px;">
                <Button Text="发布组队信息" OnClickWithoutRender="@ShowEditedDialog" />
            </div>
        </center>
        <div style="overflow-y:auto;overflow-x:hidden;height:530px">
            @if (TeamService.teams == null || TeamService.teams.Count == 0)
            {
                <span>
                    加载中...
                </span>
            }
            else
            {
                <Row ItemsPerRow="ItemsPerRow.Two" @key="TeamService.teams">
                    @foreach (var team in teamInfoModels)
                    {
                        <Card>
                            <BodyTemplate>
                                <div style="float:left;width:6%">
                                    <img class="img-fluid" style="object-fit: cover;" src="@team.Avartar" />
                                </div>
                                <div style="float:left;padding-left:20px;width:90%">
                                    <p style="font-weight:bold;font-size:25px">@team.Name</p>

                                    <Tag Color="@GetTagClass(team.Tag)">@team.Tag</Tag>
                                    <p style="color:grey;font-size:15px;padding-top:10px;height:80px;overflow:hidden;text-overflow:ellipsis;">@team.Description</p>
                                </div>
                                <div>
                                    <div style="float:left;">
                                        <h5 style="color:royalblue;font-size:20px;font-weight:bold;padding-top:8px"><i class="fa-solid fa-clock" aria-hidden="true"></i> @team.DeadLine</h5>
                                    </div>
                                    <div style="float:right;">
                                        <Button Text="加入队伍" Color="Color.Primary" @onclick="() => joinTeam(team.TeamId)" />
                                    </div>
                                    <div style="float:right;padding-right:20px;padding-top:8px">
                                        <h5 style="color:royalblue;font-size:20px;font-weight:bold"><i class="fa-solid fa-person" aria-hidden="true"></i>&nbsp @team.CurCount/@team.Count</h5>
                                    </div>`

                                </div>
                            </BodyTemplate>
                        </Card>
                    }
                </Row>
            }
        </div>
    </TabItem>
    <TabItem Text="我创建的队伍">
        <div style="overflow-y:auto;overflow-x:hidden;height:530px">
            @if (TeamService.teams == null || TeamService.teams.Count == 0)
            {
                <span>
                    加载中...
                </span>
            }
            else
            {
                @foreach (var team in LeadTeams)
                {
                    <Card>
                        <BodyTemplate>
                            <div style="float:right;width:30%;text-align: right;">
                                <h5 style="color:royalblue;font-size:20px;font-weight:bold;padding-top:8px"><i class="fa-solid fa-clock" aria-hidden="true"></i> @team.DeadLine</h5>
                            </div>
                            <div style="float:left;padding-left:20px;width:70%">
                                <p style="font-weight:bold;font-size:25px">@team.Name</p>

                                <Tag Color="@GetTagClass(team.Tag)">@team.Tag</Tag>
                                <p style="color:grey;font-size:15px;padding-top:15px;height:40px;overflow:hidden;text-overflow:ellipsis;">@team.Description</p>
                                <h5 style="color:royalblue;font-size:20px;font-weight:bold;padding-bottom:10px"><i class="fa-solid fa-person" aria-hidden="true"></i>&nbsp @team.CurCount/@team.Count</h5>
                            </div>
                            <div>
                                <div style="float:right;">
                                    <Button Text="解散队伍" Color="Color.Danger" @onclick="() => DisbandTeam(team.TeamId)" />
                                </div>
                                <div style="float:left;width:80%;">
                                    @foreach (var member in team.memberId)
                                    {
                                        <div style="padding-left:10px">
                                            <Card style="width:140px;float:left;" IsCenter="true">
                                                <BodyTemplate>
                                                    <p>@member </p>
                                                    <a class="btn btn-primary" @onclick="() => QuitMember(team.TeamId,member)">踢出队伍</a>
                                                </BodyTemplate>
                                            </Card>
                                        </div>
                                    }
                                </div>

                            </div>
                        </BodyTemplate>
                    </Card>
                }
            }
        </div>
    </TabItem>
    <TabItem Text="我加入的队伍">
        <div style="overflow-y:auto;overflow-x:hidden;height:530px">
            @if (JoinedTeams == null || JoinedTeams.Count == 0)
            {
                <span>
                    未加入队伍
                </span>
            }
            else
            {
                <Row ItemsPerRow="ItemsPerRow.One">
                    @foreach (var team in JoinedTeams)
                    {
                        <Card>
                            <BodyTemplate>
                                <div style="float:left;width:6%">
                                    <img class="img-fluid" style="object-fit: cover;" src="@team.Avartar" />
                                </div>
                                <div style="float:left;padding-left:20px;width:90%">
                                    <p style="font-weight:bold;font-size:25px">@team.Name</p>

                                    <Tag Color="@GetTagClass(team.Tag)">@team.Tag</Tag>
                                    <p style="color:grey;font-size:15px;padding-top:10px;height:80px;overflow:hidden;text-overflow:ellipsis;">@team.Description</p>
                                </div>
                                <div>
                                    <div style="float:left;">
                                        <h5 style="color:royalblue;font-size:20px;font-weight:bold;padding-top:8px"><i class="fa-solid fa-clock" aria-hidden="true"></i> @team.DeadLine</h5>
                                    </div>
                                    <div style="float:right;">
                                        <Button Text="退出队伍" Color="Color.Danger" @onclick="() => QuitTeam(team.TeamId)" />
                                    </div>
                                    <div style="float:right;padding-right:20px;padding-top:8px">
                                        <h5 style="color:royalblue;font-size:20px;font-weight:bold"><i class="fa-solid fa-person" aria-hidden="true"></i>&nbsp @team.CurCount/@team.Count</h5>
                                    </div>`

                                </div>
                            </BodyTemplate>
                        </Card>
                    }
                </Row>
            }
        </div>
    </TabItem>
</Tab>

@code {

    protected override async Task OnInitializedAsync()
    {
        string phone = await LocalStorage.GetItemAsStringAsync("phone");
        phone = phone.Replace("\"", "");

        await TeamService.GetTeams();
        await GetTeams();
        await GetLeadTeams();
        await GetJoinedTeams();
    }

    [Inject]
    [NotNull]
    private DialogService? DialogService { get; set; }

    class TeamInfoModel
    {
        public int TeamId { get; set; }
        public string? Name { get; set; }
        public string? Description { get; set; }
        public string? Tag { get; set; }
        public string? LeaderId { get; set; }
        public int? CurCount { get; set; }
        public int? Count { get; set; }
        public string? DeadLine { get; set; }
        public string? Avartar { get; set; }
    }

    class MyTeamModel
    {
        public int TeamId { get; set; }
        public string? Name { get; set; }
        public string? Description { get; set; }
        public string? Tag { get; set; }
        public int? CurCount { get; set; }
        public int? Count { get; set; }
        public string? DeadLine { get; set; }
        public List<string>? memberId { get; set; }
    }

    string userId = null;

    private List<TeamInfoModel> teamInfoModels = new List<TeamInfoModel>();
    private List<MyTeamModel> LeadTeams = new List<MyTeamModel>();

    private List<TeamInfoModel> JoinedTeams = new List<TeamInfoModel>();




    private async Task QuitTeam(int TeamId)
    {
        string phone = await LocalStorage.GetItemAsStringAsync("phone");
        phone = phone.Replace("\"", "");
        var response = await UserJoinTeamService.QuitTeam(phone, TeamId);
        if (response.Success)
        {
            await MessageService.Show(new MessageOption() { Content = "退出队伍成功" });
        }
        else
        {
            await MessageService.Show(new MessageOption() { Content = response.Message });
        }

        await TeamService.GetTeams();
        await GetTeams();
        await GetLeadTeams();
        await GetJoinedTeams();
        StateHasChanged();
    }

    private async Task QuitMember(int TeamId,string memberId)
    {
        var response = await UserJoinTeamService.QuitTeam(memberId, TeamId);
        if (response.Success)
        {
            await MessageService.Show(new MessageOption() { Content = "踢出队员成功" });
        }
        else
        {
            await MessageService.Show(new MessageOption() { Content = response.Message });
        }
        await TeamService.GetTeams();
        await GetTeams();
        await GetLeadTeams();
        await GetJoinedTeams();
        StateHasChanged();
    }
    private async Task DisbandTeam(int TeamId)
    {
        var response = await UserJoinTeamService.DisbandTeam(TeamId);
        if (response.Success)
        {
            await MessageService.Show(new MessageOption() { Content = "解散队伍成功" });
        }
        else
        {
            await MessageService.Show(new MessageOption() { Content = response.Message });
        }
        await TeamService.GetTeams();
        await GetTeams();
        await GetLeadTeams();
        await GetJoinedTeams();
        StateHasChanged();
    }


    private async Task joinTeam(int teamId)
    {
        string phone = await LocalStorage.GetItemAsStringAsync("phone");
        phone = phone.Replace("\"", "");
        UserJoinTeam teaminfo = new UserJoinTeam
            {
                TeamId = teamId,
                UserId = phone,
                Time = DateTime.Now.ToString("yyyy-MM-dd"),
            };
        var response = await UserJoinTeamService.joinTeam(teaminfo);
        if (response.Success)
        {
            await MessageService.Show(new MessageOption() { Content = "加入队伍成功" });
        }
        else
        {
            await MessageService.Show(new MessageOption() { Content = response.Message });
        }

        await TeamService.GetTeams();
        await GetTeams();
        await GetLeadTeams();
        await GetJoinedTeams();
        StateHasChanged();

    }

    private Color GetTagClass(string tag)
    {
        switch (tag)
        {
            case "拼单拼车":
                return Color.Success;
            case "学术科研":
                return Color.Primary;
            case "竞赛组队":
                return Color.Danger;
            case "娱乐活动":
                return Color.Warning;
            case "其他":
            default:
                return Color.Secondary;
        }
    }
    public class AddTeamContent
    {
        [Required]
        [AutoGenerateColumn(Order = 1, Filterable = true, Searchable = true)]
        [Display(Name = "标题")]
        public string Name { get; set; }

        [Required]
        [AutoGenerateColumn(Order = 2, Filterable = true, Searchable = true)]
        [Display(Name = "队伍描述")]
        public string Description { get; set; }

        [Required]
        [AutoGenerateColumn(Order = 3)]
        [Display(Name = "标签")]
        public EnumTag? Tag { get; set; }

        [Required]
        [Range(1, int.MaxValue, ErrorMessage = "人数必须大于0")]
        [AutoGenerateColumn(Order = 4, Filterable = true, Searchable = true)]
        [Display(Name = "总人数")]
        public int Count { get; set; }

        [Required]
        [AutoGenerateColumn(Order = 5, FormatString = "yyyy-MM-dd")]
        [Display(Name = "截止时间")]
        [CustomDeadlineValidation]
        public DateTime DeadLine { get; set; }
    }

    public class CustomDeadlineValidationAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            if (value is DateTime deadline)
            {
                DateTime tomorrow = DateTime.Today.AddDays(1);

                if (deadline < tomorrow)
                {
                    return new ValidationResult("截止时间必须在未来");
                }
            }

            return ValidationResult.Success;
        }
    }

    private AddTeamContent model = new AddTeamContent
        {
            Name = "",
            Description = "",
            Tag = EnumTag.First,
            Count = 0,
            DeadLine = DateTime.Now,
        };

    public enum EnumTag
    {
        [Display(Name = "拼单拼车")]
        First,

        [Display(Name = "学术科研")]
        Second,

        [Display(Name = "竞赛组队")]
        Third,

        [Display(Name = "娱乐活动")]
        Fourth,

        [Display(Name = "其他")]
        Fifth,
    }

    private async Task ShowEditedDialog()
    {
        var items = Utility.GenerateEditorItems<AddTeamContent>();
        //var item = items.First(i => i.GetFieldName() == nameof(AddTeamContent.rate));
        var option = new EditDialogOption<AddTeamContent>()
            {
                Title = "发布组队信息",
                Model = model,
                Items = items,
                ItemsPerRow = 1,
                RowType = RowType.Inline,
                OnCloseAsync = () =>
                {

                    return Task.CompletedTask;
                },
                OnEditAsync = context =>
                {
                    submitTeam();
                    return Task.FromResult(true);
                },
                SaveButtonText = "发布"
            };
        await DialogService.ShowEditDialog(option);
    }

    public static string GetEnumDisplayName(Enum enumValue)
    {
        Type enumType = enumValue.GetType();
        string enumName = enumValue.ToString();
        MemberInfo memberInfo = enumType.GetMember(enumName)[0];
        DisplayAttribute displayAttribute = memberInfo.GetCustomAttribute<DisplayAttribute>();
        string displayName = displayAttribute?.Name ?? enumName;
        return displayName;
    }

    private async Task submitTeam()
    {
        string phone = await LocalStorage.GetItemAsStringAsync("phone");
        phone = phone.Replace("\"", "");


        string tag = GetEnumDisplayName(model.Tag);
        Team team = new Team
            {
                Name = model.Name,
                LeaderId = phone,
                Description = model.Description,
                Tag = tag,
                Count = model.Count,
                DeadLine = model.DeadLine.ToString("yyyy-MM-dd")
            };
        var response = await TeamService.addTeam(team);
        if (response.Success)
        {
            await MessageService.Show(new MessageOption() { Content = "发布队伍成功" });
        }
        else
        {
            await MessageService.Show(new MessageOption() { Content = response.Message });
        }

        await TeamService.GetTeams();
        await GetTeams();
        await GetLeadTeams();
        await GetJoinedTeams();
        StateHasChanged();
    }

    public async Task GetTeams()
    {
        teamInfoModels.Clear();
        foreach (var team in TeamService.teams)
        {
            string UserId = await LocalStorage.GetItemAsStringAsync("phone");
            UserId = UserId.Replace("\"", "");

            if (team.LeaderId != UserId)
            {
                string phone = team.LeaderId;
                phone = phone.Replace("\"", "");
                User user = await UserService.GetUserByPhone(phone);

                int count = await UserJoinTeamService.GetTeamCurrentCount(team.TeamId);

                TeamInfoModel teamInfoModel = new TeamInfoModel
                    {
                        TeamId = team.TeamId,
                        Name = team.Name,
                        Description = team.Description,
                        Tag = team.Tag,
                        LeaderId = team.LeaderId,
                        Count = team.Count,
                        DeadLine = team.DeadLine,
                        Avartar = user.Avartar,
                        CurCount = count
                    };
                teamInfoModels.Add(teamInfoModel);
            }
        }

    }

    public async Task GetLeadTeams()
    {
        LeadTeams.Clear();
        string UserId = await LocalStorage.GetItemAsStringAsync("phone");
        UserId = UserId.Replace("\"", "");
        List<Team> TeamsList = await TeamService.getTeamByLeaderId(UserId);

        foreach (var team in TeamsList)
        {
            int count = await UserJoinTeamService.GetTeamCurrentCount(team.TeamId);

            List<string> members = await UserJoinTeamService.getMember(team.TeamId);

            MyTeamModel myTeamModel = new MyTeamModel
                {
                    TeamId = team.TeamId,
                    Name = team.Name,
                    Description = team.Description,
                    Tag = team.Tag,
                    Count = team.Count,
                    DeadLine = team.DeadLine,
                    CurCount = count,
                    memberId = members
                };
            LeadTeams.Add(myTeamModel);

        }

    }

    public async Task GetJoinedTeams()
    {
        JoinedTeams.Clear();
        string UserId = await LocalStorage.GetItemAsStringAsync("phone");
        UserId = UserId.Replace("\"", "");
        List<Team> TeamsList = await UserJoinTeamService.getTeambyJoined(UserId);
        foreach (var team in TeamsList)
        {
            string phone = team.LeaderId;
            phone = phone.Replace("\"", "");
            User user = await UserService.GetUserByPhone(phone);
            int count = await UserJoinTeamService.GetTeamCurrentCount(team.TeamId);

            TeamInfoModel teamInfoModel = new TeamInfoModel
                {
                    TeamId = team.TeamId,
                    Name = team.Name,
                    Description = team.Description,
                    Tag = team.Tag,
                    LeaderId = team.LeaderId,
                    Count = team.Count,
                    DeadLine = team.DeadLine,
                    Avartar = user.Avartar,
                    CurCount = count
                };
            JoinedTeams.Add(teamInfoModel);

        }
    }
}
