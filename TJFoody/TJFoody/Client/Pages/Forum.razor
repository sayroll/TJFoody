@page "/forum"
@using System.ComponentModel.DataAnnotations;
@using System.Diagnostics.CodeAnalysis;
@layout MainLayout
@inject IPostService PostService
@inject NavigationManager Navigation
@inject MessageService MessageService
@inject ILocalStorageService LocalStorage

<center>
    <div style="padding:20px">
        <Button ButtonStyle="ButtonStyle.Circle" Icon="fas fa-plus" OnClick="ShowEditedDialog">
        </Button>
    </div>
</center>

<div style="overflow-y:auto;overflow-x:hidden;height:480px">
    @if (PostService.Posts.Count == 0 || PostService.Posts == null)
    {
        <span>
            加载中...
        </span>
    }
    else
    {
        <Row ItemsPerRow="ItemsPerRow.Two" @key="PostService.Posts">
            @foreach (var post in PostService.Posts)
            {
                <Card>
                    <BodyTemplate>
                        <div style="width:100%;height:30px;background-color:#aacaf9"></div>
                        <div style="padding-top:15px">
                            <div style="font-weight: bold;font-size: 25px;float:left">@post.Postname</div>
                            <div style="float:right;">
                                <h5 style="color:grey;font-size:15px;">@post.Time</h5>
                            </div>
                        </div>
                        <p style="font-size: 17px;padding-top:50px;">@post.Content</p>
                        @if (post.Phone.Equals(phoneNum))
                        {
                            <Button style="float:right;margin-left:20px" Color="Color.Danger" OnClick="(()=> deletePost(post.Id))">删除</Button>
                        }

                        <div style="float:right;">
                            <Button style="float:right;" OnClick="(()=> JumpDetail(post.Id))">详情</Button>
                        </div>

                    </BodyTemplate>
                </Card>
            }
        </Row>
    }
</div>
@code {

    [Inject]
    [NotNull]
    private DialogService? DialogService { get; set; }

    private string phoneNum = string.Empty;

    public class forumContent
    {

        [Required]
        [AutoGenerateColumn(Order = 1, Filterable = true, Searchable = true)]
        [Display(Name = "帖子名称")]
        public string? title { get; set; }

        [Required]
        [AutoGenerateColumn(Order = 10, Filterable = true, Searchable = true)]
        [Display(Name = "内容")]
        public string? text { get; set; }
    }

    public forumContent model = new forumContent
        {
            title = string.Empty,
            text = string.Empty
        };

    private async Task ShowEditedDialog()
    {
        var items = Utility.GenerateEditorItems<forumContent>();
        var option = new EditDialogOption<forumContent>()
            {
                Title = "发布帖子",
                Model = model,
                Items = items,
                ItemsPerRow = 1,
                RowType = RowType.Inline,
                OnCloseAsync = () =>
                {
                    return Task.CompletedTask;
                },
                OnEditAsync = context =>
                {
                    addPost();
                    return Task.FromResult(true);
                },
                SaveButtonText = "发布"
            };
        await DialogService.ShowEditDialog(option);
    }

    protected override async Task OnInitializedAsync()
    {
        await PostService.getAllPosts();
        phoneNum = await LocalStorage.GetItemAsStringAsync("phone");
        phoneNum = phoneNum.Replace("\"", "");
    }

    private Task JumpDetail(int id)
    {
        Navigation.NavigateTo("/forum/" + id);
        return Task.CompletedTask;
    }

    private async Task addPost()
    {
        string phone = await LocalStorage.GetItemAsStringAsync("phone");
        phone = phone.Replace("\"", "");
        Post post = new Post
            {
                Phone = phone,
                Postname = model.title,
                Content = model.text,
                Time = DateTime.Now.ToString()
            };
        var response = await PostService.addPost(post);
        if (response.Success)
        {
            await MessageService.Show(new MessageOption() { Content = "发布帖子成功" });
        }
        else
        {
            await MessageService.Show(new MessageOption() { Content = response.Message });
        }
        await PostService.getAllPosts();
        StateHasChanged();
    }

    private async Task deletePost(int id)
    {
        var response = await PostService.deletePost(id);
        if (response.Success)
        {
            await MessageService.Show(new MessageOption() { Content = "删除帖子成功" });
        }
        else
        {
            await MessageService.Show(new MessageOption() { Content = response.Message });
        }
        await PostService.getAllPosts();
        StateHasChanged();
    }
}
