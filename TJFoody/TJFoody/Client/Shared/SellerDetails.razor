@page "/seller/{id:int}"
@using System.Diagnostics.CodeAnalysis;
@using System.ComponentModel.DataAnnotations;
@layout MainLayout
@inject NavigationManager Navigation
@inject ISellerService SellerService
@inject ICuisineService CuisineService
@inject IReviewService ReviewService
@inject ILocalStorageService LocalStorage
@inject IUserService UserService
@inject MessageService MessageService


@if (seller == null)
{
    <span>
        加载中...
    </span>
}
else
{
    <div>
        <Card >
            <BodyTemplate>
                <div style="float:left;width:150px">
                    <img src="@seller.ImageUrl" class="img-fluid" alt="@seller.Name" />
                </div>
                <div style="float:left;padding-left:20px">
                    <h5 style="font-weight:bold;color:#7F82BB;font-size:30px;padding-bottom:10px">@seller.Name</h5>
                    <p style="color:gray;margin-bottom:5px;"><i class="fa-solid fa-location-dot" aria-hidden="true"></i> @seller.Location</p>
                    <Rate Value="@BindValue1" IsReadonly="true" ShowValue="true" />
                </div>
                <div style="float:left;padding-left:20px">
                    <Button Text="编辑评论" OnClickWithoutRender="@ShowEditedDialog" />
                    <Button Text="提交评论" OnClickWithoutRender="@submitReview" />

                </div>
            </BodyTemplate>
        </Card>
        <br>
        <div style="width:100%;text-align:center">
        <img class="img-fluid" src="https://restapi.amap.com/v3/staticmap?location=121.218134,31.287330&zoom=15&size=500*110&markers=mid,,A:121.218134,31.287330&scale=2&key=89d990bd817cdb3c7169b7582b6d4739" />
        </div>
        <br>
        <Tab IsBorderCard="true" IsLazyLoadTabItem="true" >
            <TabItem Text="菜品">
                @if (cuisines.Count == 0)
                {
                    <span>
                        未收录菜品
                    </span>
                }
                else
                {
                <Row ItemsPerRow="ItemsPerRow.Four">
                    @foreach (var cuisine in cuisines)
                    {
                        <Card @onclick="(()=> JumpDetail(cuisine.Id))">
                            <BodyTemplate>

                                <div class="div">
                                    <img class="img-fluid" style="object-fit: cover;" src="@cuisine.ImageUrl" />
                                </div>
                                <h5 style="padding-top:10px;font-weight:bold;color:#7F82BB">@cuisine.Name</h5>
                                <Rate Value="@BindValue1" IsReadonly="true" ShowValue="true" />
                            </BodyTemplate>
                        </Card>
                    }
                </Row>
                }
                
            </TabItem>
            <TabItem Text="评价">
                @foreach (var sellerReview in sellerReviews)
                {
                    <Card>
                        <BodyTemplate>
                            <div style="float:left;width:6%">
                                <img class="img-fluid" style="object-fit: cover;" src="https://ts1.cn.mm.bing.net/th/id/R-C.0bab160015bf9e56450d5fded33bd448?rik=VFMstq3mAZG1pg&riu=http%3a%2f%2fwww.qzqn8.com%2fwp-content%2fuploads%2f2020%2f02%2f3-9.jpg&ehk=pnkhUlGCDYmxisEuCwYL4zXW92froAxt%2f0B5i9AYAkY%3d&risl=&pid=ImgRaw&r=0" />
                            </div>
                            <div style="float:left;padding-left:20px;width:80%">
                                <h5 style="font-weight:bold;color:#7F82BB">@sellerReview.UserId</h5>

                                <Rate Value="@sellerReview.Rate.Value" IsReadonly="true" ShowValue="true" />
                                <p style="color:grey;font-size:15px;padding-top:10px">@sellerReview.Content</p>
                            </div>
                            <div style="float:right;">
                                <h5 style="color:grey;font-size:15px;">@sellerReview.Date</h5>
                            </div>
                        </BodyTemplate>
                    </Card>
                }
            </TabItem>
        </Tab>
    </div>
}
@code {
    private Seller? seller = null;
    private SellerReview review = new SellerReview();

    private double BindValue1 { get; set; } = 3;


    [Inject]
    [NotNull]
    private DialogService? DialogService{ get; set; }

    [Parameter]
    public int Id { get; set; }

    public void getReviews()
    {
        sellerReviews.Clear();
        foreach(var review in ReviewService.sellerReviews)
        {
            if(review.SellerId == Id)
            {
                sellerReviews.Add(review);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ReviewService.getReviews();
        BindValue1 = ReviewService.calculateSellerRate(Id);
        getReviews();
    }
    private List<Cuisine> cuisines = new List<Cuisine>();

    protected override async Task OnParametersSetAsync()
    {
        seller = SellerService.sellers.Find(p => p.Id == Id);
        cuisines = await CuisineService.GetCuisinesBySellerId(Id);
        BindValue1 = ReviewService.calculateSellerRate(Id);
        await ReviewService.getReviews();
        getReviews();
    }

    private Task JumpDetail(int id)
    {
        Navigation.NavigateTo("/cuisinedetail/" + id);

        return Task.CompletedTask;
    }

    private List<SellerReview> sellerReviews = new List<SellerReview>();


    public class reviewContent
    {
        [Range(0, 5, ErrorMessage = "评分必须在0-5之间")]
        [Required]
        [AutoGenerateColumn(Order = 1, Filterable = true, Searchable = true)]
        [Display(Name = "评分")]
        public int rate{ get; set; }

        [Required]
        [AutoGenerateColumn(Order = 10, Filterable = true, Searchable = true)]
        [Display(Name = "评论内容")]
        public string? text{ get; set; }
    }


    private reviewContent model = new reviewContent
    {
        rate = 5,
        text = "真的很不错"
    };

    private async Task ShowEditedDialog()
    {
        var items = Utility.GenerateEditorItems<reviewContent>();
        var item = items.First(i => i.GetFieldName() == nameof(reviewContent.rate));
        var option = new EditDialogOption<reviewContent>()
            {
                Title = "评价框",
                Model = model,
                Items = items,
                ItemsPerRow = 1,
                RowType = RowType.Inline,
                OnCloseAsync = () =>
                {

                    return Task.CompletedTask;
                },
                OnEditAsync = context =>
                {
                    return Task.FromResult(true);
                }
            };
        await DialogService.ShowEditDialog(option);
    }

    private async Task submitReview()
    {
        string phone = await LocalStorage.GetItemAsStringAsync("phone");
        phone = phone.Replace("\"", "");
        SellerReview sellerReview = new SellerReview
        {
                SellerId = Id,
                UserId = phone,
                Content = model.text,
                Date = DateTime.Now.ToString(),
                Rate = model.rate
        };
        var response = await ReviewService.addSerllerReview(sellerReview);
        if(response.Success)
        {
            await MessageService.Show(new MessageOption() { Content = "评论成功" });
        }
        else
        {
            await MessageService.Show(new MessageOption() { Content = response.Message });
        }

        await ReviewService.getReviews();
        getReviews();
        BindValue1 = ReviewService.calculateSellerRate(Id);
        StateHasChanged();
    }
}
