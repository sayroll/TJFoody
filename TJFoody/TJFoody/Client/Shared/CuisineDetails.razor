@page "/cuisineDetail/{id:int}"
@using System.ComponentModel.DataAnnotations;
@using System.Diagnostics.CodeAnalysis;
@layout MainLayout
@inject NavigationManager Navigation
@inject ISellerService SellerService
@inject ICuisineService CuisineService
@inject IReviewService ReviewService
@inject ILocalStorageService LocalStorage
@inject IUserService UserService
@inject MessageService MessageService


<div>
    <Card>
        <BodyTemplate>
            <div style="float:left;width:200px">
                <img src="@cuisine.ImageUrl" class="img-fluid" alt="@cuisine.Name" />
            </div>
            <div style="float:left;padding-left:20px">
                <h5 style="font-weight:bold;color:#7F82BB;font-size:30px;padding-bottom:10px">@cuisine.Name</h5>
                <p style="padding-bottom:5px">
                    @cuisine.Description
                </p>
                <Rate Value="@BindValue1" IsReadonly="true" ShowValue="true" />
            </div>
        </BodyTemplate>
    </Card>
    <br />
    <center>
        <h5>-- 菜品评论 --</h5>
        <div >
            <Button Text="发布评论" OnClickWithoutRender="@ShowEditedDialog" />
        </div>
    </center>
    <br>
    @foreach (var review in cuisineReviews)
    {
        <Card>
            <BodyTemplate>
                <div style="float:left;width:6%">
                    <img class="img-fluid" style="object-fit: cover;" src="https://ts1.cn.mm.bing.net/th/id/R-C.0bab160015bf9e56450d5fded33bd448?rik=VFMstq3mAZG1pg&riu=http%3a%2f%2fwww.qzqn8.com%2fwp-content%2fuploads%2f2020%2f02%2f3-9.jpg&ehk=pnkhUlGCDYmxisEuCwYL4zXW92froAxt%2f0B5i9AYAkY%3d&risl=&pid=ImgRaw&r=0" />
                </div>
                <div style="float:left;padding-left:20px;width:80%">
                    <h5 style="font-weight:bold;color:#7F82BB">@review.UserId</h5>

                    <Rate Value="@review.Rate.Value" IsReadonly="true" ShowValue="true" />
                    <p style="color:grey;font-size:15px;padding-top:10px">@review.Content</p>
                </div>
                <div style="float:right;">
                    <h5 style="color:grey;font-size:15px;">@review.Date</h5>
                </div>
            </BodyTemplate>
        </Card>
    }
</div>

@code {
    //private Cuisine? cuisine = null;
    private Cuisine cuisine = new Cuisine();

    [Inject]
    [NotNull]
    private DialogService? DialogService{ get; set; }

    private double BindValue1 { get; set; } = 5;

    [Parameter]
    public int Id { get; set; }

    public class reviewContent
    {
        [Range(0, 5, ErrorMessage = "评分必须在0-5之间")]
        [Required]
        [AutoGenerateColumn(Order = 1, Filterable = true, Searchable = true)]
        [Display(Name = "评分")]
        public int rate { get; set; }

        [Required]
        [AutoGenerateColumn(Order = 10, Filterable = true, Searchable = true)]
        [Display(Name = "评论内容")]
        public string? text { get; set; }
    }

    private reviewContent model = new reviewContent
    {
            rate = 5,
            text = "真的很不错"
    };

    private async Task ShowEditedDialog()
    {
        var items = Utility.GenerateEditorItems<reviewContent>();
        var item = items.First(i => i.GetFieldName() == nameof(reviewContent.rate));
        var option = new EditDialogOption<reviewContent>()
            {
                Title = "评价框",
                Model = model,
                Items = items,
                ItemsPerRow = 1,
                RowType = RowType.Inline,
                OnCloseAsync = () =>
                {
                    return Task.CompletedTask;
                },
                OnEditAsync = context =>
                {
                    submitReview();
                    return Task.FromResult(true);
                },
                SaveButtonText = "提交评价"
            };
        await DialogService.ShowEditDialog(option);
    }

    private async Task submitReview()
    {
        string phone = await LocalStorage.GetItemAsStringAsync("phone");
        phone = phone.Replace("\"", "");
        CuisineReview cuisineReview = new CuisineReview
            {
                CuisineId = Id,
                UserId = phone,
                Content = model.text,
                Date = DateTime.Now.ToString(),
                Rate = model.rate
            };
        var response = await ReviewService.addCuisineReview(cuisineReview);
        if (response.Success)
        {
            await MessageService.Show(new MessageOption() { Content = "评论成功" });
        }
        else
        {
            await MessageService.Show(new MessageOption() { Content = response.Message });
        }

        await ReviewService.getReviews();
        BindValue1 = ReviewService.calculateCuisineRate(Id);
        getReviews();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await ReviewService.getReviews();
        BindValue1 = ReviewService.calculateCuisineRate(Id);
        getReviews();
    }

    protected override async Task OnParametersSetAsync()
    {
        cuisine = await CuisineService.GetCuisineById(Id);
        BindValue1 = ReviewService.calculateCuisineRate(Id);
        await ReviewService.getReviews();
        getReviews();
    }

    private List<CuisineReview> cuisineReviews = new List<CuisineReview>();


    public void getReviews()
    {
        cuisineReviews.Clear();
        foreach(var review in ReviewService.cuisineReviews)
        {
            if(review.CuisineId == Id)
            {
                cuisineReviews.Add(review);
            }
        }
    }

    class SellerReviewModel
    {
        public string? UserName { get; set; }
        public string? Date { get; set; }
        public string? Content { get; set; }
        public string? Avartar { get; set; }
        public int Rate { get; set; }
    }

}
